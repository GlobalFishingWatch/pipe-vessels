#standardSQL
WITH
  --
  -- Declare the source tables we are going to use through the entire query
  --
  source_published_events_encounters AS (
  SELECT
    *
  FROM
    `pipe_production_v20190502.published_events_encounters` ),
  source_vessel_info AS (
  SELECT
    *
  FROM
    `pipe_production_v20190502.vessel_info` ),
  source_vessel_database AS (
  SELECT
    *
  FROM
    `vessel_database.all_vessels_v20190701` ),
  source_country_codes AS (
  SELECT
    *
  FROM
    `gfw_research.country_codes` ),
  --
  -- Select all encounters where the main vessel is a carrier, including vessel information for each carrier pulled from the vessel database
  --
  encounters_carrier_vessels AS (
  SELECT
    encounter.vessel_id AS carrier_vessel_id,
    JSON_EXTRACT_SCALAR(encounter.event_info,
      "$.encountered_vessel_id") AS donnor_vessel_id
  FROM
    source_published_events_encounters AS encounter
  INNER JOIN
    source_vessel_info AS vessel_info
  USING
    (vessel_id)
  INNER JOIN
    source_vessel_database AS vessel_database
  ON
    vessel_info.ssvid = CAST(vessel_database.identity.mmsi AS string)
    AND encounter.event_start BETWEEN vessel_database.activity.first_timestamp
    AND vessel_database.activity.last_timestamp
    AND encounter.event_end BETWEEN vessel_database.activity.first_timestamp
    AND vessel_database.activity.last_timestamp
  WHERE
    vessel_database.matched
    AND vessel_database.is_carrier),
  --
  -- Select all vessels that participate in the encounters.
  --
  all_vessel_ids AS (
  SELECT
    encounters.carrier_vessel_id AS vessel_id
  FROM
    encounters_carrier_vessels AS encounters
  UNION ALL
  SELECT
    encounters.donnor_vessel_id AS vessel_id
  FROM
    encounters_carrier_vessels AS encounters),
  --
  -- Select all unique vessel ids. This is required because each vessel may participate in multiple encounters, or may participate as a carrier in some and as a donnor in other (in carrier-carrier encounters)
  --
  all_unique_vessel_ids AS (
  SELECT
    DISTINCT vessel_id
  FROM
    all_vessel_ids),
  --
  -- Select all the messages for the vessel ids we detected previously
  --
  positions AS (
  SELECT
    sv.seg_id,
    sv.vessel_id,
    m.timestamp,
    ST_GEOGPOINT(m.lon,
      m.lat) AS position,
    IFNULL(m.nnet_score,
      m.logistic_score) AS score,
    m.implied_speed_knots AS speed,
    m.course
  FROM
    `gfw_research.pipe_production_v20190502` AS m
  INNER JOIN
    `pipe_production_v20190502.segment_info` AS si
  USING
    (seg_id)
  INNER JOIN
    `pipe_production_v20190502.segment_vessel` AS sv
  USING
    (seg_id)
  WHERE
    _PARTITIONTIME BETWEEN '{{ start }}'
    AND '{{ end }}'
    AND si.noise = FALSE
    AND si.pos_count > 5
    AND m.lat IS NOT NULL
    AND m.lon IS NOT NULL
    AND sv.vessel_id IN (SELECT vessel_id from all_unique_vessel_ids)
    AND sv.vessel_id_rank = 1)
SELECT
  seg_id,
  vessel_id,
  timestamp,
  position,
  score,
  speed,
  course
FROM
  positions
