#!/bin/bash
source pipe-tools-utils

THIS_SCRIPT_DIR="$( cd "$(dirname "${BASH_SOURCE[0]}")" ; pwd -P )"
ASSETS=${THIS_SCRIPT_DIR}/../assets
ARGS=( \
  SOURCE \
  TEMP_BUCKET \
  DEST_INSTANCE \
  DEST_CONNECTION_STRING \
  DEST_TABLE \
)

################################################################################
# Validate and extract arguments
################################################################################
display_usage() {
  echo -e "\nUsage:\n$0 YYYY-MM-DD SOURCE TEMP_BUCKET DEST_INSTANCE DEST_CONNECTION_STRING DEST_TABLE\n"
}

if [[ $# -ne ${#ARGS[@]} ]]
then
    display_usage
    exit 1
fi

ARG_VALUES=("$@")
PARAMS=()
for index in ${!ARGS[*]}; do
  echo "${ARGS[$index]}=${ARG_VALUES[$index]}"
  declare "${ARGS[$index]}"="${ARG_VALUES[$index]}"
done


TEMP_PATH=gs://${TEMP_BUCKET}/pipe-vessels/$( date -u "+%FT%T.%N" )

echo "Running $0"
echo "  SOURCE: $SOURCE"
echo "  TEMP_BUCKET: $TEMP_BUCKET"
echo "  DEST_INSTANCE: $DEST_INSTANCE"
echo "  DEST_CONNECTION_STRING: $DEST_CONNECTION_STRING"
echo "  DEST_TABLE: $DEST_TABLE"
################################################################################
# Export records to json files
################################################################################
echo "Exporting records from $SOURCE"
EXTRACT_PATH=$TEMP_PATH/bq/*.json
bq extract \
  --destination_format=NEWLINE_DELIMITED_JSON \
  $SOURCE \
  $EXTRACT_PATH
if [ "$?" -ne 0 ]; then
  echo "  Unable to extract ${SOURCE} to ${EXTRACT_PATH}"
  exit 1
fi
echo "  Exported records from ${SOURCE} to ${EXTRACT_PATH}"

################################################################################
# Download files locally
################################################################################
echo "Downloading records from ${SOURCE} to local disk"
LOCAL_JSON_PATH=./data/json/
mkdir -p ${LOCAL_JSON_PATH}
gsutil -m cp ${EXTRACT_PATH} ${LOCAL_JSON_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to download records data locally from ${TEMP_BUCKET}"
  exit 1
fi
echo "  Downloaded records from ${TEMP_BUCKET}"

################################################################################
# Convert format from json to exported sql format
################################################################################
echo "Converting downloaded files to csv format"
LOCAL_CSV_PATH=./data/csv
LOCAL_CSV_FILE=${LOCAL_CSV_PATH}/data.csv
echo "Creating local csv directory"
mkdir -p ${LOCAL_CSV_PATH}
if [ "$?" -ne 0 ]; then
  echo "  Unable to create local CSV directory"
  exit 1
fi
echo "Converting json records to csv format"
cat ${LOCAL_JSON_PATH}/*.json | python -m pipe_vessels.postgres.tracks ${LOCAL_CSV_FILE}
if [ "$?" -ne 0 ]; then
  echo "  Unable to convert records from JSON to CSV format"
  exit 1
fi
echo "  Coverted records from JSON to CSV"

################################################################################
# Start the cloudsql proxy
################################################################################
echo "Starting the cloudsql proxy"
cloud_sql_proxy -instances=${DEST_INSTANCE}=tcp:5432 &
sleep 5

################################################################################
# Load data into postgres
################################################################################
echo "Setting up database for data import"
SETUP_SQL=${ASSETS}/postgres/tracks_setup.sql.j2
jinja2 ${SETUP_SQL} \
  -D table_name=${DEST_TABLE} \
  | psql -v ON_ERROR_STOP=ON "${DEST_CONNECTION_STRING}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to set database up for data import"
  exit 1
fi

echo "Importing data"
COPY_COMMAND="\copy ${DEST_TABLE} (seg_id, seg_geography, times, scores, speeds, courses) from stdin with (format 'csv')"
cat ${LOCAL_CSV_FILE} | psql -v ON_ERROR_STOP=ON "${DEST_CONNECTION_STRING}" -c "$COPY_COMMAND"
if [ "$?" -ne 0 ]; then
  echo "  Unable to import data into postgres"
  exit 1
fi

echo "Indexing data"
INDEX_SQL=${ASSETS}/postgres/tracks_index.sql.j2
jinja2 ${INDEX_SQL} \
  -D table_name=${DEST_TABLE} \
  | psql -v ON_ERROR_STOP=ON "${DEST_CONNECTION_STRING}"
if [ "$?" -ne 0 ]; then
  echo "  Unable to set up indices for imported data"
  exit 1
fi
